name: Build and Release

on:
    push:
        tags:
            - "v*"
    pull_request:
        branches: [main, master]
    workflow_dispatch:

env:
    GO_VERSION: "1.24"

jobs:
    test:
        name: Test
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v4
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: Cache Go modules
              uses: actions/cache@v3
              with:
                  path: ~/go/pkg/mod
                  key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
                  restore-keys: |
                      ${{ runner.os }}-go-

            - name: Download dependencies
              run: go mod download

            - name: Run tests
              run: |
                  # 运行核心功能测试（避免网络超时）
                  ./test-simple.sh

                  # 运行基础测试（无网络依赖）
                  go test -short -timeout=30s ./proxy/dialer -run "TestNewProxyDialer|TestBasicAuth|TestHTTPProxyDialer|TestHealthCheckConfig"

                  # 生成覆盖率报告
                  go test -coverprofile=coverage.out ./proxy/dialer 2>/dev/null || true

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v4
              with:
                  file: ./coverage.out
                  flags: unittests
                  name: codecov-umbrella

    build:
        name: Build
        runs-on: ubuntu-latest
        needs: test
        strategy:
            matrix:
                goos: [linux, windows, darwin, freebsd]
                goarch: [amd64, arm64]
                exclude:
                    - goos: freebsd
                      goarch: arm64
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v4
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: Cache Go modules
              uses: actions/cache@v3
              with:
                  path: ~/go/pkg/mod
                  key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
                  restore-keys: |
                      ${{ runner.os }}-go-

            - name: Get build info
              id: build_info
              run: |
                  echo "BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')" >> $GITHUB_ENV
                  echo "GIT_COMMIT=${GITHUB_SHA:0:8}" >> $GITHUB_ENV
                  if [[ $GITHUB_REF == refs/tags/* ]]; then
                    echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
                  else
                    echo "VERSION=dev-${GITHUB_SHA:0:8}" >> $GITHUB_ENV
                  fi

            - name: Build binary
              run: |
                  export CGO_ENABLED=0
                  export GOOS=${{ matrix.goos }}
                  export GOARCH=${{ matrix.goarch }}

                  BINARY_NAME="anytls-server-${{ matrix.goos }}-${{ matrix.goarch }}"
                  if [ "${{ matrix.goos }}" = "windows" ]; then
                    BINARY_NAME="${BINARY_NAME}.exe"
                  fi

                  LDFLAGS="-X main.Version=${{ env.VERSION }} \
                             -X main.BuildTime=${{ env.BUILD_TIME }} \
                             -X main.GitCommit=${{ env.GIT_COMMIT }} \
                             -s -w"

                  go build -ldflags "$LDFLAGS" -o "bin/${BINARY_NAME}" ./cmd/server

                  # Also build client
                  CLIENT_BINARY_NAME="anytls-client-${{ matrix.goos }}-${{ matrix.goarch }}"
                  if [ "${{ matrix.goos }}" = "windows" ]; then
                    CLIENT_BINARY_NAME="${CLIENT_BINARY_NAME}.exe"
                  fi
                  go build -ldflags "$LDFLAGS" -o "bin/${CLIENT_BINARY_NAME}" ./cmd/client

            - name: Upload artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: anytls-${{ matrix.goos }}-${{ matrix.goarch }}
                  path: bin/
                  retention-days: 30

    release:
        name: Release
        runs-on: ubuntu-latest
        needs: build
        if: startsWith(github.ref, 'refs/tags/')
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download all artifacts
              uses: actions/download-artifact@v4
              with:
                  path: artifacts/

            - name: Prepare release assets
              run: |
                  mkdir -p release
                  cp -r artifacts/*/ release/ || true

                  # Create archives
                  cd release

                  # Create tar.gz for Unix-like systems
                  for dir in anytls-linux-* anytls-darwin-* anytls-freebsd-*; do
                    if [ -d "$dir" ]; then
                      tar -czf "${dir}.tar.gz" -C "$dir" .
                    fi
                  done

                  # Create zip for Windows
                  for dir in anytls-windows-*; do
                    if [ -d "$dir" ]; then
                      cd "$dir"
                      zip -r "../${dir}.zip" .
                      cd ..
                    fi
                  done

                  # Generate SHA256 checksums
                  sha256sum * > sha256sum.txt

                  # List files
                  ls -la

            - name: Generate Release Notes
              id: release_notes
              run: |
                  cat > release_notes.md << 'EOF'
                  # AnyTLS-Go ${{ github.ref_name }}

                  ## 🚀 新功能
                  - 🔄 代理列表支持（多代理自动故障转移）
                  - 🎯 DIRECT 直连支持（统一管理）
                  - 🏥 智能健康检查（可配置URL和参数）
                  - 📊 数据传输感知（智能跳过检查）
                  - 🌐 UDP 支持（SOCKS5 UDP ASSOCIATE）
                  - 🛡️ 连接超时配置（连接/读取/写入超时）
                  - 📈 连接监控（连接数统计和优雅关闭）

                  ## 📦 构建信息
                  - **版本**: ${{ github.ref_name }}
                  - **构建时间**: ${{ env.BUILD_TIME }}
                  - **Git提交**: ${{ env.GIT_COMMIT }}
                  - **Go版本**: ${{ env.GO_VERSION }}

                  ## 🔧 支持的平台
                  - Linux (amd64, arm64)
                  - Windows (amd64, arm64)
                  - macOS (amd64, arm64)
                  - FreeBSD (amd64)

                  ## 📋 使用示例
                  ### 基础使用
                  ```bash
                  ./anytls-server-linux-amd64 -l 0.0.0.0:8443 -p password
                  ```

                  ### 代理配置
                  ```bash
                  ./anytls-server-linux-amd64 -l 0.0.0.0:8443 -p password \
                    -dial "socks5://proxy1.com:1080,http://proxy2.com:8080,DIRECT"
                  ```

                  ### 健康检查配置
                  ```bash
                  ./anytls-server-linux-amd64 -l 0.0.0.0:8443 -p password \
                    -dial "socks5://proxy.com:1080,DIRECT" \
                    -health-urls "https://cp.cloudflare.com/,https://www.google.com" \
                    -health-interval 1m
                  ```

                  ## 📚 文档
                  - [使用说明](https://github.com/YannStor/anytls-go/blob/main/USAGE.md)
                  - [代理功能](https://github.com/YannStor/anytls-go/blob/main/PROXY_FEATURE.md)
                  - [配置示例](https://github.com/YannStor/anytls-go/tree/main/examples)

                  ## 🛡️ 安全提示
                  - 请使用强密码
                  - 在生产环境中建议使用配置文件而非命令行参数
                  - 定期更新代理认证信息

                  ---

                  🤖 自动构建于 GitHub Actions
                  EOF

            - name: Create Release
              uses: softprops/action-gh-release@v2
              with:
                  files: release/*
                  body_path: release/release_notes.md
                  draft: false
                  prerelease: ${{ contains(github.ref, '-') }}
                  generate_release_notes: true
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    docker:
        name: Docker Build
        runs-on: ubuntu-latest
        needs: test
        if: startsWith(github.ref, 'refs/tags/')
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v5

            - name: Login to Docker Hub
              uses: docker/login-action@v5
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: yannstor/anytls-go
                  tags: |
                      type=ref,event=tag
                      type=raw,value=latest,enable={{is_default_branch}}

            - name: Build and push Docker image
              uses: docker/build-push-action@v6
              with:
                  context: .
                  platforms: linux/amd64,linux/arm64
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    notify:
        name: Notify
        runs-on: ubuntu-latest
        needs: [release, docker]
        if: startsWith(github.ref, 'refs/tags/')
        steps:
            - name: Notify success
              run: |
                  echo "✅ Release ${{ github.ref_name }} completed successfully!"
                  echo "📦 Docker images pushed to Docker Hub"
                  echo "🚀 GitHub Release created"
